//-----------------------------------------------------------------------------
//	TIER0.VPC
//
//	Project Script
//-----------------------------------------------------------------------------

$MacroRequired "PLATSUBDIR"

$Macro SRCDIR		".."
$Macro OUTBINDIR	"$SRCDIR\..\game\bin"

$Include "$SRCDIR\vpc_scripts\source_dll_base.vpc"

$Configuration
{
	$Compiler
	{
		$PreprocessorDefinitions		"$BASE;TIER0_DLL_EXPORT"
		$Create/UsePrecompiledHeader	"Use Precompiled Header (/Yu)"
		$Create/UsePCHThroughFile		"pch_tier0.h"
		$PrecompiledHeaderFile			"$(IntDir)/tier0.pch"
		$EnableC++Exceptions				"Yes (/EHsc)"
	}
	
	$Linker
	{
		$AdditionalDependencies			"$BASE Advapi32.lib ws2_32.lib"						[$WINDOWS]

		// pc publishes the import library directly
		$ImportLibrary					"$LIBPUBLIC\$(TargetName).lib"				[$WINDOWS]

		$ImportLibrary					"$LIBPUBLIC\$_IMPLIB_PREFIX$OUTBINNAME$_IMPLIB_EXT"	[$POSIX]

		$SystemLibraries                 "rt" [$LINUXALL]
	}

	// tier0/vstdlib traditionally used "lib" prefix though nobody else seems to.
	$General [$POSIX]
	{
		$GameOutputFile                                 "$OUTBINDIR/$_IMPLIB_PREFIX$OUTBINNAME$_DLL_EXT"
	}

	$Linker [$POSIX]
	{
		$OutputFile                                 "$(OBJ_DIR)/$_IMPLIB_PREFIX$OUTBINNAME$_DLL_EXT"
	}
}

$Project
{
	$Folder	"Source Files" [$WINDOWS]
	{
		-$File	"$SRCDIR\public\tier0\memoverride.cpp"
	}

	$Folder	"Link Libraries"
	{
		-$ImpLib tier0
		-$Lib	 tier1
		-$Implib vstdlib

		//$Lib	 "$SRCDIR\thirdparty\telemetry\lib\telemetry32.link" [$WIN32 && !$RAD_TELEMETRY_DISABLED]
		//$Lib	 "$SRCDIR\thirdparty\telemetry\lib\telemetry64.link" [$WIN64 && !$RAD_TELEMETRY_DISABLED]

		//$LibExternal	 "$SRCDIR/thirdparty/telemetry/lib/libtelemetryx86.link" [$LINUX32 && !$RAD_TELEMETRY_DISABLED]
		//$LibExternal	 "$SRCDIR/thirdparty/telemetry/lib/libtelemetryx64.link" [$LINUX64 && !$RAD_TELEMETRY_DISABLED]
	}
}

$Project "tier0"
{
	$Folder	"Source Files"
	{
		$File	"assert_dialog.cpp"
		$File	"assert_dialog.rc"		[$WINDOWS]
		$File	"commandline.cpp"
		$File	"cpu.cpp"
		$File	"cpumonitoring.cpp"
		$File	"cpu_posix.cpp"			[$POSIX]
		$File	"cpu_usage.cpp"
		$File	"dbg.cpp"
		$File	"dynfunction.cpp"
		$File	"etwprof.cpp"			[$WINDOWS]
		$File	"fasttimer.cpp"
		$File "InterlockedCompareExchange128.masm" [$WIN64]
		{
			$Configuration
			{   
				$CustomBuildStep
				{
					// General
					$CommandLine                "ml64.exe /nologo /c /Fo$QUOTE$(IntDir)\$(InputName).obj$QUOTE $QUOTE$(InputPath)$QUOTE"
					$Description                "Compiling $(InputName).masm"
					$Outputs                    "$(IntDir)\$(InputName).obj"
				}
			}
		}
		$File	"mem.cpp"
		$File	"mem_helpers.cpp"
		$File	"memdbg.cpp"
		$File	"memstd.cpp"
		$File	"memvalidate.cpp"
		$File	"minidump.cpp"
		$File	"pch_tier0.cpp"
		{
			$Configuration
			{
				$Compiler
				{
					$Create/UsePrecompiledHeader	"Create Precompiled Header (/Yc)"
				}
			}
		}
		$File	"platform.cpp"		[$WINDOWS]
		$File	"platform_posix.cpp"		[$POSIX]
		$File	"pme.cpp"			[$WINDOWS]
		$File	"pme_posix.cpp"		[$POSIX]
		$File	"PMELib.cpp"		[$WINDOWS||$POSIX]
		{
			$Configuration
			{
				$Compiler
				{
					$Create/UsePrecompiledHeader	"Not Using Precompiled Headers"
				}
			}
		}
		$File	"progressbar.cpp"
		$File	"security.cpp"
		$File	"systeminformation.cpp"
		$File	"stacktools.cpp"
		$File	"thread.cpp"		[$WINDOWS||$POSIX]
		$File	"threadtools.cpp"
		$File	"tier0_strtools.cpp"
		$File	"tslist.cpp"
		$File	"vcrmode.cpp"		[$WINDOWS]
		$File	"vcrmode_posix.cpp"	[$POSIX]
		$File	"vprof.cpp"
		$File	"win32consoleio.cpp"	[$WINDOWS]
		$File	"../tier1/pathmatch.cpp" [$LINUXALL]
	}

	$folder	"Header Files"
	{
		$File	"$SRCDIR\public\tier0\basetypes.h"
		$File	"$SRCDIR\public\tier0\commonmacros.h"
		$File	"$SRCDIR\public\tier0\cpumonitoring.h"
		$File	"$SRCDIR\public\tier0\dbg.h"
		$File	"$SRCDIR\public\tier0\dbgflag.h"
		$File	"$SRCDIR\public\tier0\EventMasks.h"
		$File	"$SRCDIR\public\tier0\EventModes.h"
		$File	"$SRCDIR\public\tier0\etwprof.h"
		$File	"$SRCDIR\public\tier0\fasttimer.h"
		$File	"$SRCDIR\public\tier0\ia32detect.h"
		$File	"$SRCDIR\public\tier0\icommandline.h"
		$File	"$SRCDIR\public\tier0\IOCTLCodes.h"
		$File	"$SRCDIR\public\tier0\K8PerformanceCounters.h"
		$File	"$SRCDIR\public\tier0\l2cache.h"
		$File	"$SRCDIR\public\tier0\mem.h"
		$File	"$SRCDIR\public\tier0\memalloc.h"
		$File	"$SRCDIR\public\tier0\memdbgoff.h"
		$File	"$SRCDIR\public\tier0\memdbgon.h"
		$File	"$SRCDIR\public\tier0\minidump.h"
		$File	"$SRCDIR\public\tier0\P4PerformanceCounters.h"
		$File	"$SRCDIR\public\tier0\P5P6PerformanceCounters.h"
		$File	"pch_tier0.h"
		$File	"$SRCDIR\public\tier0\platform.h"
		$File	"$SRCDIR\public\tier0\PMELib.h"
		$File	"$SRCDIR\public\tier0\progressbar.h"
		$File	"$SRCDIR\public\tier0\protected_things.h"
		$File	"resource.h"
		$File	"$SRCDIR\public\tier0\systeminformation.h"
		$File	"$SRCDIR\public\tier0\threadtools.h"
		$File	"$SRCDIR\public\tier0\tslist.h"
		$File	"$SRCDIR\public\tier0\validator.h"
		$File	"$SRCDIR\public\tier0\valobject.h"
		$File	"$SRCDIR\public\tier0\valve_off.h"
		$File	"$SRCDIR\public\tier0\valve_on.h"
		$File	"$SRCDIR\public\tier0\vcr_shared.h"
		$File	"$SRCDIR\public\tier0\vcrmode.h"
		$File	"$SRCDIR\public\tier0\vprof.h"
		$File	"$SRCDIR\public\tier0\wchartypes.h"
		$File	"$SRCDIR\public\tier0\xbox_codeline_defines.h"
		$File	"mem_helpers.h"
	}
	
	$Folder "Manifest Files" [$WINDOWS]
	{
		$File	"ValveETWProvider.man"
		{
			$Configuration
			{
				$CustomBuildStep
				{
					$CommandLine	"..\DevTools\bin\mc.exe -um $(InputFilename) -z $(InputName)Events"
					$Description	"Compiling ETW manifest file"
					$Outputs		"$(InputName)Events.h;$(InputName)Events.rc"
				}
			}
		}
	}
}
