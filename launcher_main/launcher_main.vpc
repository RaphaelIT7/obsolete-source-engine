//-----------------------------------------------------------------------------
//	LAUNCHER_MAIN.VPC
//
//	Project Script
//-----------------------------------------------------------------------------

$MacroRequired "PLATSUBDIR"

$Macro SRCDIR		".."
$Macro OUTBINDIR	"$SRCDIR\..\game"
$Macro OUTBINDIRX64	"$SRCDIR\..\game"

// Must be built explicitly as "default" in order to build a compliant submittable Disc.
// Renames will not work.
$Macro OUTBINNAME	"default"
$Macro OUTBINNAME	"hl2_osx" [$OSXALL]
$Macro OUTBINNAME	"hl2_linux" [$LINUXALL]

$Include "$SRCDIR\vpc_scripts\source_exe_base.vpc"
$Include "$SRCDIR\tier0\tier0_exclude.vpc"
$Include "$SRCDIR\tier1\tier1_exclude.vpc" [$WINDOWS]
$Include "$SRCDIR\vstdlib\vstdlib_exclude.vpc" [$WINDOWS]

$Configuration
{
	$General
	{
		$AdditionalProjectDependencies "$BASE;newdat" [$WINDOWS && !$ANALYZE]
	}

	$Linker [$WINDOWS]
	{
		$AdditionalDependencies				"$BASE User32.lib"
	}

	$ManifestTool
	{
		// Input And Output
		$AdditionalManifestFiles			"$BASE;$SRCDIR\build\win\manifests\dpi-aware.manifest;$SRCDIR\build\win\manifests\ultra-high-scroll-resolution.manifest;$SRCDIR\build\win\manifests\utf-8-code-page.manifest;$SRCDIR\out\manifests\enable-visual-styles.manifest" [!$SOURCESDK]
	}

	$Resources
	{
		// General
		$PreprocessorDefinitions				"$BASE;SRC_PRODUCT_INTERNAL_NAME_STRING=\$QUOTEhl2\$QUOTE;SRC_PRODUCT_ORIGINAL_NAME_STRING=\$QUOTEhl2.exe\$QUOTE"
	}

	$PreBuildEvent [$WIN32]
	{
		$CommandLine		"if EXIST $OUTBINDIR\hl2.exe for /f $QUOTEdelims=$QUOTE %%A in ('attrib $QUOTE$OUTBINDIR\hl2.exe$QUOTE') do set valveTmpIsReadOnly=$QUOTE%%A$QUOTE" "\n" \
							"set valveTmpIsReadOnlyLetter=%valveTmpIsReadOnly:~6,1%" "\n" \
							"if $QUOTE%valveTmpIsReadOnlyLetter%$QUOTE==$QUOTER$QUOTE del /q $QUOTE$(TargetDir)$QUOTE$(TargetFileName)" "\n" \
							"$CRCCHECK"
	}

	$PreBuildEvent [$WIN64]
	{
		$CommandLine		"if EXIST $OUTBINDIRX64\hl2_win64.exe for /f $QUOTEdelims=$QUOTE %%A in ('attrib $QUOTE$OUTBINDIRX64\hl2_win64.exe$QUOTE') do set valveTmpIsReadOnly=$QUOTE%%A$QUOTE" "\n" \
							"set valveTmpIsReadOnlyLetter=%valveTmpIsReadOnly:~6,1%" "\n" \
							"if $QUOTE%valveTmpIsReadOnlyLetter%$QUOTE==$QUOTER$QUOTE del /q $QUOTE$(TargetDir)$QUOTE$(TargetFileName)" "\n" \
							"$CRCCHECK"
	}

	$PostBuildEvent	[$WIN32 && !$ANALYZE]
	{
		// Note that the PDB must be checked in with the name it is linked as or else the debugger
		// will not be able to find it. That's why it is checked in as default.pdb.
		// override with specific behavior
		$CommandLine				"IF NOT EXIST $OUTBINDIR MKDIR $OUTBINDIR" "\n"				\
									"COPY $(TargetPath) $OUTBINDIR\hl2.exe" "\n"					\
									"IF ERRORLEVEL 1 GOTO BuildEventFailed" "\n" \
									"COPY $(IntDir)\default.pdb $OUTBINDIR\default.pdb" "\n"					\
									"IF ERRORLEVEL 1 GOTO BuildEventFailed" "\n" \
									"IF EXIST $(TargetDir)$(TargetName).map COPY $(TargetDir)$(TargetName).map $OUTBINDIR\hl2.map" "\n" \
									"$OUTBINDIR\bin\newdat $OUTBINDIR\hl2.exe" "\n"					\
									"COPY $(SolutionDir)LICENSE $OUTBINDIR\LICENSE" "\n"			\
									"GOTO BuildEventOK" "\n" \
									":BuildEventFailed" "\n" \
									"ECHO *** ERROR! PostBuildStep FAILED for $(ProjectName)! EXE or DLL is probably running. ***" "\n" \
									"DEL /Q $(TargetPath)" "\n" \
									"EXIT 1" "\n" \
									":BuildEventOK" "\n"
	}

	$PostBuildEvent	[$WIN64 && !$ANALYZE]
	{
		// Note that the PDB must be checked in with the name it is linked as or else the debugger
		// will not be able to find it. That's why it is checked in as default.pdb.
		// override with specific behavior
		$CommandLine				"IF NOT EXIST $OUTBINDIRX64 MKDIR $OUTBINDIRX64" "\n"				\
									"COPY $(TargetPath) $OUTBINDIRX64\hl2_win64.exe" "\n"					\
									"IF ERRORLEVEL 1 GOTO BuildEventFailed" "\n" \
									"COPY $(IntDir)\default.pdb $OUTBINDIRX64\default.pdb" "\n"					\
									"IF ERRORLEVEL 1 GOTO BuildEventFailed" "\n" \
									"IF EXIST $(TargetDir)$(TargetName).map COPY $(TargetDir)$(TargetName).map $OUTBINDIRX64\hl2_win64.map" "\n" \
									"$OUTBINDIRX64\bin\x64\newdat $OUTBINDIRX64\hl2_win64.exe" "\n"					\
									"COPY $(SolutionDir)LICENSE $OUTBINDIRX64\LICENSE" "\n"			\
									"GOTO BuildEventOK" "\n" \
									":BuildEventFailed" "\n" \
									"ECHO *** ERROR! PostBuildStep FAILED for $(ProjectName)! EXE or DLL is probably running. ***" "\n" \
									"DEL /Q $(TargetPath)" "\n" \
									"EXIT 1" "\n" \
									":BuildEventOK" "\n"
	}
}

$Project
{
	$Folder	"Link Libraries"
	{
		-$Lib tier0 [$WINDOWS]
	}
}

$Project "launcher_main"
{
	$Folder	"Source Files"
	{
		$File	"main_win.cpp" [$WINDOWS]
		$File	"main_posix.cpp" [$OSXALL || $LINUXALL]
	}

	$Folder "Header Files" [$WINDOWS]
	{
		$File	"$SRCDIR\common\scoped_dll.h"
		$File	"$SRCDIR\common\scoped_process_error_mode.h"
	}

	$Folder "Resources" [$WINDOWS]
	{
		$File	"resources\app.ico"
		$File	"$SRCDIR\out\manifests\enable-visual-styles.manifest"
	}
}
